{% extends 'base.html.twig' %}

{% block title %}Nouveau Paiement{% endblock %}

{% block body %}
<div class="container mt-5">
    <div class="card shadow-lg rounded border-0">
        <div class="card-body">
            <h1 class="card-title mb-4">Créer un nouveau Paiement</h1>

            {% for message in app.flashes('success') %}
                <div class="alert alert-success">{{ message }}</div>
            {% endfor %}
            {% for message in app.flashes('error') %}
                <div class="alert alert-danger">{{ message }}</div>
            {% endfor %}

            {{ form_start(form) }}
            <div class="row">
                <div class="col-md-6">
                    {{ form_row(form.date) }}
                    {{ form_row(form.mode) }}
                    {{ form_row(form.reference) }}
                </div>
                <div class="col-md-6">
                    {{ form_row(form.factures) }}
                    <div class="form-group mb-3">
                        <label for="devise" class="form-label">Devise</label>
                        <select id="devise" name="devise" class="form-control">
                            {% for code, name in currencies %}
                                <option value="{{ code }}" {% if code == 'TND' %}selected{% endif %}>
                                    {{ name }} ({{ code }})
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                    {{ form_row(form.montant, {'attr': {'readonly': 'readonly'}}) }}
                    <div class="form-group mb-3">
                        <label class="form-label">Montant converti</label>
                        <div id="montant-converti" class="form-control-block fw-bold "></div>
                    </div>
                </div>
            </div>

            <div class="mt-4">
                <button type="submit" class="btn btn-primary">{{ button_label|default('Enregistrer') }}</button>
                <a href="{{ path('app_paiement_index') }}" class="btn btn-outline-secondary">Annuler</a>
            </div>
            {{ form_end(form) }}
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const montantInput = document.querySelector('#paiement_montant');
    const facturesSelect = document.querySelector('#paiement_factures');
    const deviseSelect = document.querySelector('#devise');
    const montantConverti = document.getElementById('montant-converti');
    
    function updateMontant() {
        let total = 0;
        const selectedOptions = Array.from(facturesSelect.selectedOptions);
        
        selectedOptions.forEach(option => {
            const montant = parseFloat(option.getAttribute('data-total'));
            if (!isNaN(montant)) {
                total += montant;
            }
        });
        
        montantInput.value = total.toFixed(2);
        updateConvertedAmount();
    }

    async function updateConvertedAmount() {
        const amount = montantInput.value;
        const targetCurrency = deviseSelect.value;
        
        if (!amount || amount <= 0) {
            montantConverti.textContent = '0.00 ' + targetCurrency;
            return;
        }

        if (targetCurrency === 'TND') {
            montantConverti.textContent = `${amount} TND (pas de conversion nécessaire)`;
            return;
        }

        try {
            const response = await fetch(`/api/convert?amount=${amount}&from=TND&to=${targetCurrency}`);
            const data = await response.json();
            
            if (data.success) {
                montantConverti.textContent = `${data.result.toFixed(2)} ${targetCurrency}`;
            } else {
                montantConverti.textContent = 'Erreur de conversion';
            }
        } catch (error) {
            console.error('Erreur API:', error);
            montantConverti.textContent = 'Erreur de conversion';
        }
    }

    facturesSelect.addEventListener('change', updateMontant);
    deviseSelect.addEventListener('change', updateConvertedAmount);
    
    // Calculer le montant initial
    updateMontant();
});
</script>
{% endblock %}