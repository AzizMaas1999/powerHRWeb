{% extends 'base.html.twig' %}

{% block title %}Chatbot CLFR{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .chat-container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 1rem;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .chat-messages {
            height: 400px;
            overflow-y: auto;
            padding: 1rem;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            margin-bottom: 1rem;
        }

        .message {
            margin-bottom: 1rem;
            padding: 0.8rem;
            border-radius: 5px;
            max-width: 80%;
        }

        .user-message {
            background: #007bff;
            color: white;
            margin-left: auto;
        }

        .bot-message {
            background: #f1f1f1;
            color: #333;
        }

        .chat-input {
            display: flex;
            gap: 1rem;
        }

        .chat-input input {
            flex: 1;
            padding: 0.8rem;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            font-size: 1rem;
        }

        .chat-input button {
            padding: 0.8rem 1.5rem;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .chat-input button:hover {
            background: #0056b3;
        }

        .suggestions {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }

        .suggestion-btn {
            padding: 0.5rem 1rem;
            background: #e9ecef;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .suggestion-btn:hover {
            background: #dee2e6;
        }

        .typing-indicator {
            display: none;
            padding: 0.8rem;
            background: #f1f1f1;
            border-radius: 5px;
            margin-bottom: 1rem;
        }

        .typing-indicator span {
            display: inline-block;
            width: 8px;
            height: 8px;
            background: #666;
            border-radius: 50%;
            margin-right: 5px;
            animation: typing 1s infinite;
        }

        @keyframes typing {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }
    </style>
{% endblock %}

{% block body %}
    <div class="chat-container">
        <h2 class="mb-4">Chatbot CLFR</h2>
        
        <div class="suggestions">
            <button type="button" class="suggestion-btn" data-suggestion="Afficher les informations du CLFR">Informations CLFR</button>
            <button type="button" class="suggestion-btn" data-suggestion="Afficher les évaluations">Évaluations</button>
            <button type="button" class="suggestion-btn" data-suggestion="Afficher les feedbacks">Feedbacks</button>
            <button type="button" class="suggestion-btn" data-suggestion="Comment ajouter une évaluation ?">Aide évaluation</button>
        </div>

        <div class="chat-messages" id="chatMessages">
            <div class="message bot-message">
                Bonjour ! Je suis votre assistant CLFR. Comment puis-je vous aider aujourd'hui ?
            </div>
        </div>

        <div class="typing-indicator" id="typingIndicator">
            <span></span>
            <span></span>
            <span></span>
        </div>

        <form class="chat-input" id="chatForm" onsubmit="return false;">
            <input type="text" id="messageInput" placeholder="Tapez votre message...">
            <button type="submit">Envoyer</button>
        </form>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const clfrId = {{ clfrId|default('null') }};
            const chatMessages = document.getElementById('chatMessages');
            const messageInput = document.getElementById('messageInput');
            const typingIndicator = document.getElementById('typingIndicator');
            const chatForm = document.getElementById('chatForm');
            const suggestionButtons = document.querySelectorAll('.suggestion-btn');

            // Gestionnaire pour les boutons de suggestion
            suggestionButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const suggestion = this.getAttribute('data-suggestion');
                    messageInput.value = suggestion;
                    sendMessage();
                });
            });

            // Gestionnaire pour le formulaire
            chatForm.addEventListener('submit', function(e) {
                e.preventDefault();
                sendMessage();
            });

            // Gestionnaire pour la touche Entrée
            messageInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    sendMessage();
                }
            });

            function addMessage(message, isUser = false) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
                messageDiv.textContent = message;
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            function showTypingIndicator() {
                typingIndicator.style.display = 'block';
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            function hideTypingIndicator() {
                typingIndicator.style.display = 'none';
            }

            async function sendMessage() {
                const message = messageInput.value.trim();
                if (!message) return;

                addMessage(message, true);
                messageInput.value = '';
                showTypingIndicator();

                try {
                    const response = await fetch('{{ path('app_clfr_chat_send') }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            message: message,
                            clfrId: clfrId
                        })
                    });

                    const data = await response.json();
                    hideTypingIndicator();
                    
                    if (data.error) {
                        addMessage('Désolé, une erreur est survenue. Veuillez réessayer.');
                    } else {
                        addMessage(data.response);
                    }
                } catch (error) {
                    hideTypingIndicator();
                    addMessage('Désolé, une erreur est survenue. Veuillez réessayer.');
                }
            }
        });
    </script>
{% endblock %} 